Product Owner - Brittany

Overall, Brittany will outline 
	What went well in the Sprint:
	What could be improved:
	What will we commit to improve in the next Sprint:

Now, Brittany will outline:
	What she should start doing
	What she should stop doing
	What she should continue doing

	PRESENTATION NOTES, DO WITH THIS WHAT YOU WILL

	We decided to use Ionic with Vue for our app. The main reason for using the Ionic Framework is because it suits our needs perfectly;
	It offers some very unique functionality that is priceless when approaching development from a progressive webapp
	perspective. For example, Capacitor (a part of the Ionic framework)
	is a cross-platform native runtime that makes it easy to build modern web apps that run natively on iOS, Android, and the Web.
	We can mostly obviously demonstrate the usefulness of this tool via the 2nd tab view, photos. Here you see, after clicking this partially
	hidden blue button just above the bottom tab header, is an interface that 
	exposes the API of Capacitor Camera (as well as the filesystem API, behind the scenes). Depending on the OS currently being run on,
	Capacitor will automatically interact with the native functionality of each OS. So simply by utilizng up this complex algorithm
	for our webapp, we can rest easy knowning that most of the work involved with porting to mobile platforms is taken care of for us.
	This is trumendously useful given the scope of our project. This leaves us more time to sort out design, our own upcoming sorting 
	algorithms, and perhaps most substantially learning Ionic and Vue frameworks themselves alongside the hundreds of interconnected
	dependencies that Ionic is built upon.

	The vast majority of our development time has been spent on learning the aforementioned intracacies of the Ionic Framework
	(and not to mention Vue). As such, we have not had been able to totally implement important backend features like authentication
	and CRUD. We are partially in the implementation phase regarding authentication, but still figuring out how to properly
	connect OAuth2, Axios and CRUD operations to the Ionic framework. The reason for the delay includes many reasons, but one example 
	is properly implementing interceptor functions in order to
	catch HTTP responses to a request, so that Ionic & Vue can dynamically render the appropriate page for whatever response the
	server/backend returns in any given instance. If we return to page 1, we can see at the top left an icon that takes us to our 
	Sign-in and Sign-up page. This design is tentative and while a great deal of the necessary functionality has been coded, 
	the authentication is not actually connected to a Mongo cluser at this point, so clicking sign up does not actually query a database
	at this point. 

	Now, hitting the back button on the browser and returning to our tab layout will print out some HTML. Just another bug we'll be fixing
	ASAP. Refreshing the page will clear that. Returning to tab 2 and clicking on the videos button at the top right will take us to
	our prototype video player with comment module. Here you can see some mockup with basic styling that essentially makes up one
	of our testing grounds for learning Ionic/Vue, and specifically rendering in multiple user defined components. 